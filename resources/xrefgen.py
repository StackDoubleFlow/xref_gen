# Import xref data
# Generated by xref_gen: https://github.com/StackDoubleFlow/xref_gen
# @author xref_gen - StackDoubleFlow
from ghidra.program.model.symbol import SourceType

import json;
import re;
import os;

listing = currentProgram.getListing()

def readTrace(trace):
    matching = getGlobalFunctions(trace["start"])
    if len(matching) < 1:
        print("Could not find starting point: " + trace["start"])
        return
    start = matching[0]

    symbol = trace["symbol"]
    addr = start.getEntryPoint()
    codeUnits = listing.getInstructions(start.getBody(), True)
    path = re.split("([^0-9])", trace["trace"])[1:]
    for i in range(0, int(len(path) / 2)):
        op = path[i * 2]
        num = int(path[i * 2 + 1])
        if op == "L":
            count = 0
            for codeUnit in codeUnits:
                if codeUnit.getMnemonicString() == "bl":
                    if count == num:
                        addr = codeUnit.getReferencesFrom()[0].getToAddress()
                        codeUnits = listing.getInstructions(addr, True)
                        break
                    count += 1
        elif op == "B":
            count = 0
            for codeUnit in codeUnits:
                if codeUnit.getMnemonicString() == "b":
                    if count == num:
                        addr = codeUnit.getReferencesFrom()[0].getToAddress()
                        codeUnits = listing.getInstructions(addr, True)
                        break
                    count += 1
        elif op == "P":
            count = 0
            for codeUnit in codeUnits:
                if codeUnit.getMnemonicString() == "adrp":
                    if count == num:
                        reg = codeUnit.getRegister(0)
                        base = codeUnit.getScalar(1).getUnsignedValue()
                        for codeUnit in codeUnits:
                            if codeUnit.getMnemonicString() == "ldr" and reg in codeUnit.getOpObjects(1):
                                addr = codeUnit.getReferencesFrom()[0].getToAddress()
                                break
                            if codeUnit.getMnemonicString() == "add" and codeUnit.getRegister(1) == reg:
                                offset = codeUnit.getScalar(2).getUnsignedValue()
                                addr = toAddr(base + offset)
                                break
                        break
                    count += 1
    createLabel(addr, symbol, True, SourceType.USER_DEFINED)

ghidraDataPath = os.path.join(getSourceFile().getParentFile().toString(), "ghidra_data.json")
with open(ghidraDataPath, "r") as jsonFile:
    jsonData = json.load(jsonFile)
    for trace in jsonData["traces"]:
        readTrace(trace)
